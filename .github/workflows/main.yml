name: Build and Deploy

on:
  workflow_dispatch:
    # Detta gör att workflowen bara körs manuellt
    inputs:
      deploy_message:
        description: 'Anledning till denna deployment'
        required: true
        default: 'Manuell deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Fix permissions for Maven wrapper
      run: |
        chmod +x api-gateway-service/mvnw
        chmod +x advertisement-service/mvnw
        chmod +x identification-service/mvnw
        chmod +x candidate-application-service/mvnw
        
    - name: Build Spring Boot apps
      run: |
        cd api-gateway-service && ./mvnw package -DskipTests
        cd ../advertisement-service && ./mvnw package -DskipTests
        cd ../identification-service && ./mvnw package -DskipTests
        cd ../candidate-application-service && ./mvnw package -DskipTests
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        
    - name: Build Frontend
      run: |
        cd frontend-service
        npm install
        npm run build
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker images
      run: |
        # Bygg och tagga images
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest ./frontend-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gateway:latest ./api-gateway-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/advertisement:latest ./advertisement-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/identification:latest ./identification-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/candidate:latest ./candidate-application-service
        
        # Pusha images till Docker Hub
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/gateway:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/advertisement:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/identification:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/candidate:latest

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Skapa .env fil med alla secrets
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > ~/app/.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> ~/app/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ~/app/.env
          
          # Kopiera docker-compose.yml till EC2
          mkdir -p ~/app
          cat > ~/app/docker-compose.yml << 'EOL'
          version: '3.8'
          services:
            frontend:
              image: ${DOCKERHUB_USERNAME}/frontend:latest
              container_name: frontend
              restart: always
              ports:
                - "5173:80"
              environment:
                - VITE_API_URL=http://localhost:8081
              depends_on:
                - api-gateway
              
            api-gateway:
              image: ${DOCKERHUB_USERNAME}/gateway:latest
              container_name: gateway
              restart: always
              ports:
                - "8081:8081"
              environment:
                - SERVER_PORT=8081
                - SPRING_CLOUD_GATEWAY_ROUTES_0_URI=http://advertisement:8082
                - SPRING_CLOUD_GATEWAY_ROUTES_0_ID=advertisement-service
                - SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0=Path=/api/advertisements/**
                - SPRING_CLOUD_GATEWAY_ROUTES_1_URI=http://identification:8083
                - SPRING_CLOUD_GATEWAY_ROUTES_1_ID=identification-service
                - SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0=Path=/api/identity/**
                - SPRING_CLOUD_GATEWAY_ROUTES_2_URI=http://candidate:8084
                - SPRING_CLOUD_GATEWAY_ROUTES_2_ID=candidate-service
                - SPRING_CLOUD_GATEWAY_ROUTES_2_PREDICATES_0=Path=/api/candidates/**
                - SPRING_CLOUD_GATEWAY_GLOBALCORS_ADD-TO-SIMPLE-URL-HANDLER-MAPPING=true
                - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWEDORIGINS=http://localhost:5173
                - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWEDMETHODS=GET,POST,PUT,DELETE,OPTIONS
                - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWEDHEADERS=*
                - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWCREDENTIALS=true
              depends_on:
                - advertisement
                - identification
                - candidate
                
            advertisement:
              image: ${DOCKERHUB_USERNAME}/advertisement:latest
              container_name: advertisement
              restart: always
              ports:
                - "8082:8082"
              environment:
                - SERVER_PORT=8082
                - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_aws:5432/mydb
                - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
                - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
              depends_on:
                - postgres_aws
                
            identification:
              image: ${DOCKERHUB_USERNAME}/identification:latest
              container_name: identification
              restart: always
              ports:
                - "8083:8083"
              environment:
                - SERVER_PORT=8083
                - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_aws:5432/mydb
                - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
                - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
              depends_on:
                - postgres_aws
                
            candidate:
              image: ${DOCKERHUB_USERNAME}/candidate:latest
              container_name: candidate
              restart: always
              ports:
                - "8084:8084"
              environment:
                - SERVER_PORT=8084
                - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_aws:5432/mydb
                - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
                - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
              depends_on:
                - postgres_aws
                
            postgres_aws:
              image: postgres:14-alpine
              container_name: postgres-aws
              restart: always
              ports:
                - "5432:5432"
              environment:
                - POSTGRES_DB=mydb
                - POSTGRES_USER=${DB_USERNAME}
                - POSTGRES_PASSWORD=${DB_PASSWORD}
              volumes:
                - postgres_data:/var/lib/postgresql/data
                
          volumes:
            postgres_data:
          EOL
          
          # Stoppa existerande containrar
          cd ~/app
          docker-compose down
          
          # Hämta senaste images
          docker-compose pull
          
          # Starta om med nya images
          docker-compose up -d
